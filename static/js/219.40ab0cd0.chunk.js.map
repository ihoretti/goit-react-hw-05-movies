{"version":3,"file":"static/js/219.40ab0cd0.chunk.js","mappings":"wRAEaA,EAAeC,EAAAA,GAAAA,IAAH,0DAKZC,EAAYD,EAAAA,GAAAA,EAAH,sBACTE,EAAaF,EAAAA,GAAAA,GAAH,kHAMVG,EAAaH,EAAAA,GAAAA,GAAH,mH,4BCmCvB,EA1Ca,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KAaA,IAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,WAAMN,GAAN,mGAEOO,EAAAA,EAAAA,IAAWP,GAFlB,OAENQ,EAFM,OAGNC,EAAOD,EAAKC,KAAKN,KACvBC,EAAQK,GAJI,yGAAH,sDAObH,EAAQN,EACT,GAAE,CAACA,IAES,OAATG,EAIJ,OACE,SAACL,EAAD,UACGK,EAAKO,OAAS,EACbP,EAAKQ,KAAI,YAA0C,IAC7CC,EADMC,EAAsC,EAAtCA,GAAIC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aAM7B,OAHKH,EADY,OAAjBG,EACU,yCAAqCA,GAClCC,GAGX,UAACjB,EAAD,YACE,SAACJ,EAAD,CAAcsB,IAAKL,EAAOM,IAAKJ,KAC/B,SAACjB,EAAD,UAAYiB,MAFGD,EAKpB,KAED,SAAC,KAAD,uBAIP,C,wLC7CYM,EAAcvB,EAAAA,GAAAA,GAAH,sBAEXwB,EAAexB,EAAAA,GAAAA,GAAH,sBAEZyB,EAAQzB,EAAAA,GAAAA,GAAH,sBACL0B,EAAO1B,EAAAA,GAAAA,EAAH,sBACJ2B,EAAU3B,EAAAA,GAAAA,EAAH,6D","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","components/Reviews/Reviews.styled.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ActorProfile = styled.img`\n  width: 250px;\n  height: auto;\n`;\n\nexport const ActorName = styled.p``;\nexport const ListActors = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n`;\nexport const ItemActors = styled.li`\n  margin: 15px;\n  list-style: none;\n  box-shadow: 0px 10px 20px 5px rgba(0, 0, 0, 0.3);\n`;\n","import { getCredits } from 'API/fetchMovies';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ActorName, ActorProfile, ItemActors, ListActors } from './Cast.styled';\nimport picture from '../../picture/no-image.jpg';\nimport { Message } from 'components/Reviews/Reviews.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    const getCast = async movieId => {\n      try {\n        const resp = await getCredits(movieId);\n        const data = resp.data.cast;\n        setCast(data);\n      } catch (error) {}\n    };\n    getCast(movieId);\n  }, [movieId]);\n\n  if (cast === null) {\n    return;\n  }\n\n  return (\n    <ListActors>\n      {cast.length > 0 ? (\n        cast.map(({ id, original_name, profile_path }) => {\n          let image;\n          profile_path !== null\n            ? (image = `https://image.tmdb.org/t/p/w500${profile_path}`)\n            : (image = picture);\n\n          return (\n            <ItemActors key={id}>\n              <ActorProfile src={image} alt={original_name} />\n              <ActorName>{original_name}</ActorName>\n            </ItemActors>\n          );\n        })\n      ) : (\n        <Message>No Cast</Message>\n      )}\n    </ListActors>\n  );\n};\n\nexport default Cast;\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul``;\n\nexport const ReviewsItems = styled.li``;\n\nexport const Title = styled.h2``;\nexport const Text = styled.p``;\nexport const Message = styled.p`\n  color: red;\n  text-align: center;\n`;\n"],"names":["ActorProfile","styled","ActorName","ListActors","ItemActors","movieId","useParams","useState","cast","setCast","useEffect","getCast","getCredits","resp","data","length","map","image","id","original_name","profile_path","picture","src","alt","ReviewsList","ReviewsItems","Title","Text","Message"],"sourceRoot":""}